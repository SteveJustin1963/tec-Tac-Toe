\ Define constants
0 CONSTANT EMPTY
1 CONSTANT X
2 CONSTANT O
3 CONSTANT BOARD-SIZE

VARIABLE board BOARD-SIZE CELLS ALLOT
VARIABLE current-player
VARIABLE game-over
VARIABLE winner

\ Initialize the board
: init-board ( -- )
    BOARD BOARD-SIZE 0 DO
        EMPTY I + CELLS + !
    LOOP ;

\ Display the board
: display-board ( -- )
    CR ."   |   |   "
    CR ."---+---+---"
    CR ."   |   |   "
    CR ."---+---+---"
    CR ."   |   |   " ;

\ Check if the game is over
: game-over? ( -- flag )
    game-over @ ;

\ Check if the board is full
: board-full? ( -- flag )
    BOARD-SIZE 0 DO
        I CELLS + @ EMPTY =
    LOOP ;

\ Check for a win
: check-win ( -- flag )
    \ Check rows
    BOARD-SIZE 3 * 0 DO
        I DUP I + 1 + DUP I + 2 +
        BOARD + BOARD + BOARD + @ @ @
        X X X = IF
            X winner !
            TRUE EXIT
        THEN
        O O O = IF
            O winner !
            TRUE EXIT
        THEN
    LOOP
    \ Check columns
    3 0 DO
        I DUP 3 * 1 + DUP 3 * 2 + DUP
        BOARD + BOARD + BOARD + @ @ @
        X X X = IF
            X winner !
            TRUE EXIT
        THEN
        O O O = IF
            O winner !
            TRUE EXIT
        THEN
    LOOP
    \ Check diagonals
    BOARD 0 @ BOARD 4 @ BOARD 8 @
    X X X = IF
        X winner !
        TRUE EXIT
    THEN
    O O O = IF
        O winner !
        TRUE EXIT
    THEN
    BOARD 2 @ BOARD 4 @ BOARD 6 @
    X X X = IF
        X winner !
        TRUE EXIT
    THEN
    O O O = IF
        O winner !
        TRUE EXIT
    THEN
    FALSE ;

\ Check for a draw
: check-draw ( -- flag )
    board-full? ;

\ Get player input
: get-input ( -- index )
    BEGIN
        ." Player " current-player @ . ." , enter your move (1-9): "
        ACCEPT
        1 PARSE-WORD NUMBER DROP DUP 1 < OVER 9 > OR
    UNTIL ;

\ Update the board with player's move
: update-board ( index -- )
    DUP 1 - BOARD + DUP @
    current-player @ SWAP !
    ;

\ Toggle current player
: toggle-player ( -- )
    current-player @ X = IF
        O current-player !
    ELSE
        X current-player !
    THEN ;

\ Main game loop
: tic-tac-toe ( -- )
    init-board
    BEGIN
        display-board
        get-input update-board
        check-win IF
            ." Player " winner @ . ." wins!"
            game-over !
        ELSE
            toggle-player
            check-draw IF
                ." It's a draw!"
                game-over !
            THEN
        THEN
        game-over? UNTIL ;

\ Start the game
0 X !  \ Start with player X
0 0 0 0 winner game-over
tic-tac-toe
