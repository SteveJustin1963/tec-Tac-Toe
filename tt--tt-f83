: draw-board  ( -- )  \ Draws the current state of the game board
  ." 0 1 2" cr
  ." 3 4 5" cr
  ." 6 7 8" cr
;

: display-board  ( n -- ) \ Displays the current state of the game board
  dup 0 = if emit #254 then  \ Draw an X if the value is 0
  dup 1 = if emit #1 then   \ Draw an O if the value is 1
  dup 2 = if emit #32 then  \ Draw a blank space if the value is 2
  drop
;

: display  ( -- ) \ Displays the game board and prompts for the next move
  draw-board
  0 9 1 do
    i board + c@ display-board
    i 2 mod 0= if cr then
  loop
  cr
  ." Enter your move: "
;

: get-move  ( -- n ) \ Prompts the player for their next move and returns it
  cr ." Enter your move: " accept dup number? if
    dup 9 < if
      dup board + c@ = 2 = if
        board + c! drop
        1
      else
        ." Invalid move" cr
        0
      then
    else
      ." Invalid move" cr
      0
    then
  else
    ." Invalid input" cr
    0
  then
;

: check-winner  ( -- n ) \ Returns 0 if no winner, 1 if X wins, 2 if O wins
  0 1 2 board + c@ = 0 =  \ Check for horizontal X wins
  3 4 5 board + c@ = 0 = and 
  6 7 8 board + c@ = 0 = and or
  0 3 6 board + c@ = 0 =  \ Check for vertical X wins
  1 4 7 board + c@ = 0 = and
  2 5 8 board + c@ = 0 = and or or
  0 4 8 board + c@ = 0 =  \ Check for diagonal X wins
  2 4 6 board + c@ = 0 = and or
  if
    drop 1
  else
    0 1 2 board + c@ = 1 =  \ Check for horizontal O wins
    3 4 5 board + c@ = 1 = and
    6 7 8 board + c@ = 1 = and or
    0 3 6 board + c@ = 1 =  \ Check for vertical O wins
    1 4 7 board + c@ = 1 = and
    2 5 8 board + c@ = 1 = and or or
    0 4 8 board + c@ = 1 =  \ Check for diagonal O wins
    2 4 6 board + c@ = 1 = and or
    if
      drop 2
    else
      0
    then
  then
;

: game  ( -- ) \ Main game loop
  create board  9 allot \ Array to store the
